# -*- coding: utf-8 -*-
#
# pydmd documentation build configuration file, created by
# sphinx-quickstart on Mon Jun 22 16:09:40 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import sphinx_rtd_theme

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../..'))
import pina

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.4'
# if needs_sphinx > sphinx.__display_version__:
#     message = 'This project needs at least Sphinx
#     v{0!s}'.format(needs_sphinx)
#     raise VersionRequirementError(message)

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    #'sphinx.ext.graphviz',
    'sphinx_paramlinks',
    'sphinx.ext.doctest',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    #'sphinx.ext.ifconfig',
    'sphinx.ext.mathjax',
    'sphinx.ext.autosectionlabel',
]
#autosummary_generate = True

intersphinx_mapping = {
    'python': ('http://docs.python.org/3', None),
    'numpy': ('http://docs.scipy.org/doc/numpy/', None),
    'scipy': ('http://docs.scipy.org/doc/scipy/reference/', None),
    'matplotlib': ('http://matplotlib.sourceforge.net/', None),
    'torch': ('https://pytorch.org/docs/stable/', None),
    'lightning.pytorch': ("https://lightning.ai/docs/pytorch/stable/", None),
    "lightning.app": ("https://lightning.ai/docs/app/stable/", None),
    "PIL": ("https://pillow.readthedocs.io/en/stable/", None),
    "torchmetrics": ("https://torchmetrics.readthedocs.io/en/stable/", None),
    "graphcore": ("https://docs.graphcore.ai/en/latest/", None),
    "lightning_habana": ("https://lightning-ai.github.io/lightning-Habana/", None),
    "tensorboardX": ("https://tensorboardx.readthedocs.io/en/stable/", None),
    "lightning.app": ("https://lightning.ai/docs/app/stable/", None),
    "lightning.fabric": ("https://lightning.ai/docs/fabric/stable/", None),
}

nitpicky = True

nitpick_ignore = [
    ("py:class", "typing.Self"),
    # missing in generated API
    ("py:exc", "MisconfigurationException"),
    # TODO: generated list of all existing ATM, need to be fixed
    ("py:class", "AveragedModel"),
    ("py:class", "CometExperiment"),
    ("py:meth", "DataModule.__init__"),
    ("py:class", "HPUAccelerator"),
    ("py:class", "Tensor"),
    ("py:class", "_PATH"),
    ("py:func", "add_argument"),
    ("py:func", "add_class_arguments"),
    ("py:meth", "apply_to_collection"),
    ("py:attr", "best_model_path"),
    ("py:attr", "best_model_score"),
    ("py:attr", "checkpoint_path"),
    ("py:class", "comet_ml.ExistingExperiment"),
    ("py:class", "comet_ml.Experiment"),
    ("py:class", "comet_ml.OfflineExperiment"),
    ("py:meth", "deepspeed.DeepSpeedEngine.backward"),
    ("py:attr", "example_input_array"),
    ("py:class", "jsonargparse._core.ArgumentParser"),
    ("py:class", "jsonargparse._namespace.Namespace"),
    ("py:class", "jsonargparse.core.ArgumentParser"),
    ("py:class", "jsonargparse.namespace.Namespace"),
    ("py:class", "transformer_engine.common.recipe.DelayedScaling"),
    ("py:class", "lightning.fabric.accelerators.xla.XLAAccelerator"),
    ("py:class", "lightning.fabric.loggers.csv_logs._ExperimentWriter"),
    ("py:class", "lightning.fabric.loggers.logger._DummyExperiment"),
    ("py:class", "lightning.fabric.plugins.precision.transformer_engine.TransformerEnginePrecision"),
    ("py:class", "lightning.fabric.plugins.precision.bitsandbytes.BitsandbytesPrecision"),
    ("py:class", "lightning.fabric.utilities.device_dtype_mixin._DeviceDtypeModuleMixin"),
    ("py:func", "lightning.fabric.utilities.seed.seed_everything"),
    ("py:class", "lightning.fabric.utilities.types.LRScheduler"),
    ("py:class", "lightning.fabric.utilities.types.ReduceLROnPlateau"),
    ("py:class", "lightning.fabric.utilities.types.Steppable"),
    ("py:class", "lightning.fabric.wrappers._FabricOptimizer"),
    ("py:class", "lightning.fabric.utilities.throughput.Throughput"),
    ("py:func", "lightning.fabric.utilities.throughput.measure_flops"),
    ("py:class", "lightning.fabric.utilities.spike.SpikeDetection"),
    ("py:meth", "lightning.pytorch.Callback.on_exception"),
    ("py:class", "lightning.pytorch.LightningModule"),
    ("py:meth", "lightning.pytorch.LightningModule.on_train_epoch_end"),
    ("py:meth", "lightning.pytorch.LightningModule.on_validation_epoch_end"),
    ("py:meth", "lightning.pytorch.LightningModule.save_hyperparameters"),
    ("py:meth", "lightning.pytorch.LightningModule.test_step"),
    ("py:meth", "lightning.pytorch.LightningModule.training_step"),
    ("py:meth", "lightning.pytorch.LightningModule.validation_step"),
    ("py:obj", "lightning.pytorch.accelerators.MPSAccelerator"),
    ("py:meth", "lightning.pytorch.accelerators.accelerator.Accelerator.register_accelerators"),
    ("py:paramref", "lightning.pytorch.callbacks.Checkpoint._sphinx_paramlinks_save_top_k"),
    ("py:func", "lightning.pytorch.callbacks.RichProgressBar.configure_columns"),
    ("py:meth", "lightning.pytorch.callbacks.callback.Callback.on_load_checkpoint"),
    ("py:meth", "lightning.pytorch.callbacks.callback.Callback.on_save_checkpoint"),
    ("py:class", "lightning.pytorch.callbacks.checkpoint.Checkpoint"),
    ("py:meth", "lightning.pytorch.callbacks.progress.progress_bar.ProgressBar.get_metrics"),
    ("py:class", "lightning.pytorch.callbacks.progress.rich_progress.RichProgressBarTheme"),
    ("py:class", "lightning.pytorch.callbacks.progress.tqdm_progress.Tqdm"),
    ("py:class", "lightning.pytorch.cli.ReduceLROnPlateau"),
    ("py:meth", "lightning.pytorch.core.LightningDataModule.setup"),
    ("py:meth", "lightning.pytorch.core.LightningModule.configure_model"),
    ("py:meth", "lightning.pytorch.core.LightningModule.save_hyperparameters"),
    ("py:meth", "lightning.pytorch.core.LightningModule.setup"),
    ("py:meth", "lightning.pytorch.core.hooks.ModelHooks.on_after_batch_transfer"),
    ("py:meth", "lightning.pytorch.core.hooks.ModelHooks.setup"),
    ("py:meth", "lightning.pytorch.core.hooks.ModelHooks.transfer_batch_to_device"),
    ("py:meth", "lightning.pytorch.core.mixins.hparams_mixin.HyperparametersMixin.save_hyperparameters"),
    ("py:class", "lightning.pytorch.loggers.Logger"),
    ("py:func", "lightning.pytorch.loggers.logger.rank_zero_experiment"),
    ("py:class", "lightning.pytorch.plugins.environments.cluster_environment.ClusterEnvironment"),
    ("py:class", "lightning.pytorch.plugins.environments.slurm_environment.SLURMEnvironment"),
    ("py:class", "lightning.pytorch.plugins.io.wrapper._WrappingCheckpointIO"),
    ("py:func", "lightning.pytorch.seed_everything"),
    ("py:class", "lightning.pytorch.serve.servable_module.ServableModule"),
    ("py:class", "lightning.pytorch.serve.servable_module_validator.ServableModuleValidator"),
    ("py:mod", "lightning.pytorch.strategies"),
    ("py:class", "lightning.pytorch.strategies.SingleXLAStrategy"),
    ("py:meth", "lightning.pytorch.strategies.ddp.DDPStrategy.configure_ddp"),
    ("py:meth", "lightning.pytorch.strategies.ddp.DDPStrategy.setup_distributed"),
    ("py:meth", "lightning.pytorch.trainer.trainer.Trainer.lightning_module"),
    ("py:class", "lightning.pytorch.tuner.lr_finder._LRFinder"),
    ("py:class", "lightning.pytorch.utilities.CombinedLoader"),
    ("py:obj", "lightning.pytorch.utilities.deepspeed.ds_checkpoint_dir"),
    ("py:obj", "lightning.pytorch.utilities.memory.is_cuda_out_of_memory"),
    ("py:obj", "lightning.pytorch.utilities.memory.is_cudnn_snafu"),
    ("py:obj", "lightning.pytorch.utilities.memory.is_oom_error"),
    ("py:obj", "lightning.pytorch.utilities.memory.is_out_of_cpu_memory"),
    ("py:func", "lightning.pytorch.utilities.rank_zero.rank_zero_only"),
    ("py:class", "lightning.pytorch.utilities.types.LRSchedulerConfig"),
    ("py:class", "lightning.pytorch.utilities.types.OptimizerLRSchedulerConfig"),
    ("py:class", "lightning_habana.pytorch.plugins.precision.HPUPrecisionPlugin"),
    ("py:class", "lightning_habana.pytorch.strategies.HPUParallelStrategy"),
    ("py:class", "lightning_habana.pytorch.strategies.SingleHPUStrategy"),
    ("py:obj", "logger.experiment"),
    ("py:class", "mlflow.tracking.MlflowClient"),
    ("py:attr", "model"),
    ("py:meth", "move_data_to_device"),
    ("py:class", "neptune.Run"),
    ("py:class", "neptune.handler.Handler"),
    ("py:meth", "on_after_batch_transfer"),
    ("py:meth", "on_before_batch_transfer"),
    ("py:meth", "on_save_checkpoint"),
    ("py:meth", "optimizer_step"),
    ("py:class", "out_dict"),
    ("py:meth", "prepare_data"),
    ("py:class", "lightning.pytorch.callbacks.device_stats_monitor.DeviceStatsMonitor"),
    ("py:meth", "setup"),
    ("py:meth", "test_step"),
    ("py:meth", "toggle_optimizer"),
    ("py:class", "torch.ScriptModule"),
    ("py:class", "torch.distributed.fsdp.fully_sharded_data_parallel.CPUOffload"),
    ("py:class", "torch.distributed.fsdp.fully_sharded_data_parallel.MixedPrecision"),
    ("py:class", "torch.distributed.fsdp.fully_sharded_data_parallel.ShardingStrategy"),
    ("py:class", "torch.distributed.fsdp.sharded_grad_scaler.ShardedGradScaler"),
    ("py:class", "torch.distributed.fsdp.wrap.ModuleWrapPolicy"),
    ("py:func", "torch.inference_mode"),
    ("py:meth", "torch.mean"),
    ("py:func", "torch.nn.Module.eval"),
    ("py:func", "torch.no_grad"),
    ("py:class", "torch.optim.lr_scheduler.LRScheduler"),
    ("py:meth", "torch.set_default_tensor_type"),
    ("py:class", "torch.utils.data.DistributedSampler"),
    ("py:class", "torch_xla.distributed.parallel_loader.MpDeviceLoader"),
    ("py:func", "torch_xla.distributed.xla_multiprocessing.spawn"),
    ("py:class", "torch._dynamo.OptimizedModule"),
    ("py:mod", "tqdm"),
    ("py:meth", "training_step"),
    ("py:meth", "transfer_batch_to_device"),
    ("py:class", "types.FrameType"),
    ("py:class", "typing.TypeGuard"),
    ("py:meth", "untoggle_optimizer"),
    ("py:meth", "validation_step"),
    ("py:class", "wandb.Artifact"),
    ("py:func", "wandb.init"),
    ("py:class", "wandb.sdk.lib.RunDisabled"),
    ("py:class", "wandb.wandb_run.Run"),

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = pina.__project__
copyright = pina.__copyright__
author = pina.__author__

# autoclass
autoclass_content = 'both'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = pina.__version__
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for viewcode extension ---------------------------------------

# Follow alias objects that are imported from another module such as functions,
# classes and attributes. As side effects, this option ... ???
# If false, ... ???.
# The default is True.
viewcode_import = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = ['_tutorial']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
# html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'pinadoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    'papersize': 'a4paper',

    # The font size ('10pt', '11pt' or '12pt').
    'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    'preamble': '',

    # Latex figure (float) alignment
    'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, 'pina.tex', u'PINA Documentation',
   u'PINA contributors', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pina', u'PINA Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, 'pina', u'PINA Documentation',
   author, 'pina', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False
